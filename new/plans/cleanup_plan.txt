# Repository Cleanup Runbook

Purpose: normalize the fork before rebasing or public release by pruning logs, relocating fork-only artifacts, and refreshing documentation.

## Preconditions
1. Start from the repository root (`/mnt/pikachu/STAR`).
2. Ensure `git status` is clean or changes are staged for work-in-progress.
3. All commands below assume a POSIX shell and that `mv`, `rm`, and `mkdir` are available.

## Step 1 – Prepare the `new/` Hierarchy
1. Create the directory scaffold: `mkdir -p new/{src,scripts,docs,plans,tests,testing}`.
2. Inside `new/testing`, add buckets for artefacts: `mkdir -p new/testing/{data,outputs}`.
3. Drop a placeholder for empty `src`: `touch new/src/.gitkeep`.

## Step 2 – Relocate Fork-Only Documentation
1. Move enhanced docs into `new/docs/`:
   ```bash
   mv docs/* new/docs/
   rmdir docs
   mv asan_findings.md CHANGES_FORK.md CODE_OF_CONDUCT.md CONTRIBUTING.md \
      DEBUG_REFERENCE.md DEBUG_RUN_STATUS.md MEMORY_TESTING.md RELEASEnotes.md \
      _config.yml new/docs/
   ```
2. Send any design notes ending in `*_plan.txt` to `new/plans/`:
   ```bash
   mv *plan*.txt new/plans/
   mv fix_test_plan.sh new/plans/
   ```
3. Relocate other guidance (e.g., `gene_id_insertion_plan.txt`) from documentation into `new/plans/` if present.

## Step 3 – Move Scripts and Test Harnesses
1. Scripts used for running or building STAR → `new/scripts/`:
   ```bash
   mv runSTAR*.sh build_star.sh docker_build.sh subset_fastq.sh new/scripts/
   mv analyze_concordance.py validate_zg_zx.py new/scripts/
   ```
2. Test drivers → `new/tests/`:
   ```bash
   mv emit_test.sh integration_test.sh tag_test.sh test_debug.sh \
      test_debug_fixes.sh testSTAR.sh testSTAR.sh.backup \
      test_synthetic.sh test_trailer_fix.sh mem_test_tags.sh new/tests/
   ```
3. Move datasets and expected outputs:
   ```bash
   mv Aligned.sortedByCoord.out.bam filtered_*.fastq.gz filtered_gene_names.txt new/testing/data/
   mv emit_test_output integration_test_output mem_test_output tag_test_output \
      test_binary_output test_v2_output test_ordering_fix testing Solo.out _STARtmp \
      new/testing/outputs/
   mv subset new/testing/data/
   ```

## Step 4 – Delete Volatile Logs
Remove transient log files generated by diagnostic runs:
```bash
rm -f log log2 Log.out Log.progress.out debug_log mem_test.log runstar_output.log
```

## Step 5 – Refresh Top-Level Docs
1. Overwrite `README.md` with a concise summary that links to `CHANGES.md` and explains the `new/` directory.
2. Replace `CHANGES.md` with a fork-focused changelog covering new flags and usage examples.
3. Create or update `new/docs/TECHNICAL_NOTES.md` to document implementation details and testing.

## Step 6 – Verification
1. Ensure the top-level now contains only the upstream build inputs plus `README.md`, `CHANGES.md`, `LICENSE`, `new/`, etc. Use `ls -1` to confirm.
2. Run `git status --short` to verify the expected modifications are present.
3. Optionally execute smoke tests:
   - `ASAN=1 make clean && ASAN=1 make STAR` (memory instrumentation).
   - `new/tests/emit_test.sh` and `new/tests/integration_test.sh` (functional validation).
4. Capture the final tree layout for release notes if needed (`tree -L 2 -a > new/plans/post_cleanup_tree.txt`).

## Step 7 – Hand-off
1. Commit changes with a message such as `repo: consolidate fork artifacts`.
2. Update release documentation to reference `new/` and the new flags prior to publishing.
